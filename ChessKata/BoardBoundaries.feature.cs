// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:2.0.50727.3615
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ChessKata
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Boundaries of the board.")]
    public partial class BoundariesOfTheBoard_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BoardBoundaries.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Boundaries of the board.", "In order to obey the rules of Chess\r\nAs a Move Taker\r\nI want to be prevented from" +
                    " entering moves outside the boundary of the board.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn tries to move off board")]
        public virtual void PawnTriesToMoveOffBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn tries to move off board", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("I have an empty board");
#line 9
  testRunner.And("I have a White Pawn at A8");
#line 10
 testRunner.When("I move A8 to A9");
#line 11
 testRunner.Then("I see the message: \'Illegal Move\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Knight tries to move off board")]
        public virtual void KnightTriesToMoveOffBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Knight tries to move off board", ((string[])(null)));
#line 13
 this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("I have an empty board");
#line 16
  testRunner.And("I have a Black Knight at G8");
#line 17
 testRunner.When("I move G8 to I7");
#line 18
 testRunner.Then("I see the message: \'Illegal Move\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn moves legally")]
        public virtual void PawnMovesLegally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn moves legally", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 22
testRunner.Given("I have an empty board");
#line 23
  testRunner.And("I have a White Pawn at A7");
#line 24
 testRunner.When("I move A7 to A8");
#line 25
 testRunner.Then("I see the message: \'Pawn to A8\'");
#line 26
  testRunner.And("I have a White Pawn at A8");
#line 27
  testRunner.And("I do not have a piece at A7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Knight moves legally")]
        public virtual void KnightMovesLegally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Knight moves legally", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given("I have an empty board");
#line 32
  testRunner.And("I have a Black Knight at G8");
#line 33
 testRunner.When("I move G8 to H6");
#line 34
 testRunner.Then("I see the message: \'Knight to H6\'");
#line 35
  testRunner.And("I have a Black Knight at H6");
#line 36
  testRunner.And("I do not have a piece at G8");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
