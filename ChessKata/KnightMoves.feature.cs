// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:2.0.50727.3615
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ChessKata
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Moving the Knight.")]
    public partial class MovingTheKnight_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KnightMoves.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Moving the Knight.", "In order to play chess\r\nAs a Player\r\nI want to move the Knight legally.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Moving the knight legally")]
        public virtual void MovingTheKnightLegally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving the knight legally", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("I have an empty board");
#line 9
  testRunner.And("I have a Black Knight at A7");
#line 10
 testRunner.When("I move A7 to B5");
#line 11
 testRunner.Then("I see the message: \'Knight to B5\'");
#line 12
  testRunner.And("I have a Black Knight at B5");
#line 13
  testRunner.And("I do not have a piece at A7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Moving the knight illegally")]
        public virtual void MovingTheKnightIllegally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving the knight illegally", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given("I have an empty board");
#line 18
  testRunner.And("I have a Black Knight at A7");
#line 19
 testRunner.When("I move A7 to C4");
#line 20
 testRunner.Then("I see the message: \'Illegal Move\'");
#line 21
  testRunner.And("I have a Black Knight at A7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Moving the knight illegally, 3 squares vertically")]
        public virtual void MovingTheKnightIllegally3SquaresVertically()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving the knight illegally, 3 squares vertically", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("I have an empty board");
#line 26
  testRunner.And("I have a Black Knight at A7");
#line 27
 testRunner.When("I move A7 to A4");
#line 28
 testRunner.Then("I see the message: \'Illegal Move\'");
#line 29
  testRunner.And("I have a Black Knight at A7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Moving the knight illegally, moving onto piece of same colour")]
        public virtual void MovingTheKnightIllegallyMovingOntoPieceOfSameColour()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving the knight illegally, moving onto piece of same colour", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 34
testRunner.Given("I have an empty board");
#line 35
  testRunner.And("I have a Black Knight at A7");
#line 36
  testRunner.And("I have a Black Pawn at B5");
#line 37
 testRunner.When("I move A7 to B5");
#line 38
 testRunner.Then("I see the message: \'Illegal Move\'");
#line 39
  testRunner.And("I have a Black Knight at A7");
#line 40
  testRunner.And("I have a Black Pawn at B5");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
